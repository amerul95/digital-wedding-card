
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  roleId: 'roleId',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ThemeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  fontFamily: 'fontFamily',
  previewImageUrl: 'previewImageUrl',
  createdAt: 'createdAt'
};

exports.Prisma.SongScalarFieldEnum = {
  id: 'id',
  title: 'title',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt'
};

exports.Prisma.WeddingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  slug: 'slug',
  groomName: 'groomName',
  brideName: 'brideName',
  eventDate: 'eventDate',
  venueName: 'venueName',
  venueAddress: 'venueAddress',
  googleMapLink: 'googleMapLink',
  invitationMessage: 'invitationMessage',
  coverImageUrl: 'coverImageUrl',
  themeId: 'themeId',
  songId: 'songId',
  createdAt: 'createdAt'
};

exports.Prisma.RsvpScalarFieldEnum = {
  id: 'id',
  weddingId: 'weddingId',
  guestName: 'guestName',
  guestPhone: 'guestPhone',
  guestEmail: 'guestEmail',
  attendance: 'attendance',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  weddingId: 'weddingId',
  transferTypeId: 'transferTypeId',
  qrImageUrl: 'qrImageUrl',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  accountHolder: 'accountHolder',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.TransferTypeScalarFieldEnum = {
  id: 'id',
  typeName: 'typeName'
};

exports.Prisma.GalleryImageScalarFieldEnum = {
  id: 'id',
  weddingId: 'weddingId',
  imageUrl: 'imageUrl',
  caption: 'caption',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Theme: 'Theme',
  Song: 'Song',
  Wedding: 'Wedding',
  Rsvp: 'Rsvp',
  Donation: 'Donation',
  TransferType: 'TransferType',
  GalleryImage: 'GalleryImage'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\mirol\\OneDrive\\Desktop\\digital-wedding-card\\app\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\mirol\\OneDrive\\Desktop\\digital-wedding-card\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.0",
  "engineVersion": "c0aafc03b8ef6cdced8654b9a817999e02457d6a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\n// =========================================\n// Prisma Configuration\n// =========================================\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../app/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// =========================================\n// USERS\n// =========================================\nmodel User {\n  id        String    @id @default(uuid())\n  name      String\n  email     String    @unique\n  password  String\n  roleId    Int?\n  role      Role?     @relation(fields: [roleId], references: [id])\n  createdAt DateTime  @default(now())\n  weddings  Wedding[]\n}\n\n// =========================================\n// ROLES\n// =========================================\nmodel Role {\n  id    Int    @id @default(autoincrement())\n  name  String @unique\n  users User[]\n}\n\n// =========================================\n// THEMES\n// =========================================\nmodel Theme {\n  id              String    @id @default(uuid())\n  name            String\n  primaryColor    String?\n  secondaryColor  String?\n  fontFamily      String?\n  previewImageUrl String?\n  createdAt       DateTime  @default(now())\n  weddings        Wedding[]\n}\n\n// =========================================\n// SONGS\n// =========================================\nmodel Song {\n  id        String    @id @default(uuid())\n  title     String?\n  fileUrl   String\n  createdAt DateTime  @default(now())\n  weddings  Wedding[]\n}\n\n// =========================================\n// WEDDINGS\n// =========================================\nmodel Wedding {\n  id                String   @id @default(uuid())\n  userId            String\n  slug              String   @unique\n  groomName         String\n  brideName         String\n  eventDate         DateTime\n  venueName         String?\n  venueAddress      String?\n  googleMapLink     String?\n  invitationMessage String?\n  coverImageUrl     String?\n  themeId           String?\n  songId            String?\n  createdAt         DateTime @default(now())\n\n  // Relations\n  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  theme         Theme?         @relation(fields: [themeId], references: [id])\n  song          Song?          @relation(fields: [songId], references: [id])\n  rsvps         Rsvp[]\n  donations     Donation[]\n  galleryImages GalleryImage[]\n}\n\n// =========================================\n// RSVPS\n// =========================================\nmodel Rsvp {\n  id         String   @id @default(uuid())\n  weddingId  String\n  guestName  String\n  guestPhone String?\n  guestEmail String?\n  attendance String?\n  message    String?\n  createdAt  DateTime @default(now())\n\n  wedding Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)\n}\n\n// =========================================\n// DONATIONS\n// =========================================\nmodel Donation {\n  id             String   @id @default(uuid())\n  weddingId      String\n  transferTypeId Int?\n  qrImageUrl     String?\n  bankName       String?\n  accountNumber  String?\n  accountHolder  String?\n  note           String?\n  createdAt      DateTime @default(now())\n\n  wedding      Wedding       @relation(fields: [weddingId], references: [id], onDelete: Cascade)\n  transferType TransferType? @relation(fields: [transferTypeId], references: [id])\n}\n\n// =========================================\n// TRANSFER TYPES\n// =========================================\nmodel TransferType {\n  id        Int        @id @default(autoincrement())\n  typeName  String\n  donations Donation[]\n}\n\n// =========================================\n// GALLERY IMAGES\n// =========================================\nmodel GalleryImage {\n  id        String   @id @default(uuid())\n  weddingId String\n  imageUrl  String\n  caption   String?\n  order     Int      @default(0)\n  createdAt DateTime @default(now())\n\n  wedding Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)\n}\n",
  "inlineSchemaHash": "c68e7b02489cfd381a7f81586e7284f62aabf9bfe20b2997fb237654bfd5df30",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"role\",\"kind\":\"object\",\"type\":\"Role\",\"relationName\":\"RoleToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weddings\",\"kind\":\"object\",\"type\":\"Wedding\",\"relationName\":\"UserToWedding\"}],\"dbName\":null},\"Role\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoleToUser\"}],\"dbName\":null},\"Theme\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"primaryColor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"secondaryColor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fontFamily\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"previewImageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weddings\",\"kind\":\"object\",\"type\":\"Wedding\",\"relationName\":\"ThemeToWedding\"}],\"dbName\":null},\"Song\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fileUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weddings\",\"kind\":\"object\",\"type\":\"Wedding\",\"relationName\":\"SongToWedding\"}],\"dbName\":null},\"Wedding\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"groomName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"brideName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"venueName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venueAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleMapLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"invitationMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coverImageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"themeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"songId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWedding\"},{\"name\":\"theme\",\"kind\":\"object\",\"type\":\"Theme\",\"relationName\":\"ThemeToWedding\"},{\"name\":\"song\",\"kind\":\"object\",\"type\":\"Song\",\"relationName\":\"SongToWedding\"},{\"name\":\"rsvps\",\"kind\":\"object\",\"type\":\"Rsvp\",\"relationName\":\"RsvpToWedding\"},{\"name\":\"donations\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"DonationToWedding\"},{\"name\":\"galleryImages\",\"kind\":\"object\",\"type\":\"GalleryImage\",\"relationName\":\"GalleryImageToWedding\"}],\"dbName\":null},\"Rsvp\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weddingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"guestName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"guestPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"guestEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attendance\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"wedding\",\"kind\":\"object\",\"type\":\"Wedding\",\"relationName\":\"RsvpToWedding\"}],\"dbName\":null},\"Donation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weddingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transferTypeId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"qrImageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bankName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountHolder\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"note\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"wedding\",\"kind\":\"object\",\"type\":\"Wedding\",\"relationName\":\"DonationToWedding\"},{\"name\":\"transferType\",\"kind\":\"object\",\"type\":\"TransferType\",\"relationName\":\"DonationToTransferType\"}],\"dbName\":null},\"TransferType\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"typeName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"donations\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"DonationToTransferType\"}],\"dbName\":null},\"GalleryImage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weddingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"caption\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"wedding\",\"kind\":\"object\",\"type\":\"Wedding\",\"relationName\":\"GalleryImageToWedding\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

