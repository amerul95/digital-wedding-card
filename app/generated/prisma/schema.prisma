// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// =========================================
// Prisma Configuration
// =========================================

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================
// USERS
// =========================================
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  roleId    Int?
  role      Role?     @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  weddings  Wedding[]
}

// =========================================
// ROLES
// =========================================
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

// =========================================
// THEMES
// =========================================
model Theme {
  id              String    @id @default(uuid())
  name            String
  primaryColor    String?
  secondaryColor  String?
  fontFamily      String?
  previewImageUrl String?
  createdAt       DateTime  @default(now())
  weddings        Wedding[]
}

// =========================================
// SONGS
// =========================================
model Song {
  id        String    @id @default(uuid())
  title     String?
  fileUrl   String
  createdAt DateTime  @default(now())
  weddings  Wedding[]
}

// =========================================
// WEDDINGS
// =========================================
model Wedding {
  id                String   @id @default(uuid())
  userId            String
  slug              String   @unique
  groomName         String
  brideName         String
  eventDate         DateTime
  venueName         String?
  venueAddress      String?
  googleMapLink     String?
  invitationMessage String?
  coverImageUrl     String?
  themeId           String?
  songId            String?
  createdAt         DateTime @default(now())

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme         Theme?         @relation(fields: [themeId], references: [id])
  song          Song?          @relation(fields: [songId], references: [id])
  rsvps         Rsvp[]
  donations     Donation[]
  galleryImages GalleryImage[]
}

// =========================================
// RSVPS
// =========================================
model Rsvp {
  id         String   @id @default(uuid())
  weddingId  String
  guestName  String
  guestPhone String?
  guestEmail String?
  attendance String?
  message    String?
  createdAt  DateTime @default(now())

  wedding Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)
}

// =========================================
// DONATIONS
// =========================================
model Donation {
  id             String   @id @default(uuid())
  weddingId      String
  transferTypeId Int?
  qrImageUrl     String?
  bankName       String?
  accountNumber  String?
  accountHolder  String?
  note           String?
  createdAt      DateTime @default(now())

  wedding      Wedding       @relation(fields: [weddingId], references: [id], onDelete: Cascade)
  transferType TransferType? @relation(fields: [transferTypeId], references: [id])
}

// =========================================
// TRANSFER TYPES
// =========================================
model TransferType {
  id        Int        @id @default(autoincrement())
  typeName  String
  donations Donation[]
}

// =========================================
// GALLERY IMAGES
// =========================================
model GalleryImage {
  id        String   @id @default(uuid())
  weddingId String
  imageUrl  String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  wedding Wedding @relation(fields: [weddingId], references: [id], onDelete: Cascade)
}
